import pytest
from main import next_step

@pytest.mark.parametrize("equation, pene_step, expected", [


    #INVALID INPUT
    #(" ", "false", ""),
    #("!|", "false", ""),
    #("-", "false", ""),
    
    #LIMIT CASES
    (" 2x =   0   ", "false", "x=0"),
    (" x =   0   ", "false", "x=0"),
   

    #END LIMIT CASES

    #ADD PLUS MULTIPLY
    ("(8x + 3) * (3)= 0", "false", "24x+9=0"),
    ("24x + 9 = 0", "false", "24x=-9"),
    ("24x = -9", "true", "x=-3/8"), #actual last step
    #("24x = -9", "true", "x=-9/24"), optimal #TODO

    ("2x - 3 = -5", "false", "2x-3-1*(-5)=0"), #check frontend for -1*
    ("2x-3+5=0", "false", "2x+2=0"),
    ("2x+2=0", "false", "2x=-2"),
    ("2x=-2", "true", "x=-1"),

    ("6x - 26 = 16x - 56", "false", "6x-(16x-56)-1*26=0"),
    ("6x-(16x-56)-1*26=0", "false", "6x+((56-16x)-26)=0"),
    ("6x+((56-16x)-26)=0", "false", "6x+(30-16x)=0"),
    ("6x+(30-16x)=0", "false", "30-10x=0"), #TODO: fix loop ## prova lista con valori check

    ("10x - 150x  - 3 = 0", "false", "-140x-3=0"),
    ("-140x-3=0", "false", "-140x=3"),
    ("-140x=3", "true", "x=-3/140"),

    ("8(x + 3) + 6(2x + 1) + (4(4x + 2) + 2(6x +7)) = 0", "false", "(8x+24)+(6*(2x+1)+(4*(4x+2)+2*(6x+7)))=0"),
    ("(8x+24)+(6*(2x+1)+(4*(4x+2)+2*(6x+7)))=0", "false", "8x+(((12x+6)+(4*(4x+2)+2*(6x+7)))+24)=0"),
    ("8x+(((12x+6)+(4*(4x+2)+2*(6x+7)))+24)=0", "false", "8x+(12x+(((16x+8)+(2*(6x+7)+24))+6))=0"),
    ("8x+(12x+(((16x+8)+(2*(6x+7)+24))+6))=0", "false", "8x+(12x+(16x+(((12x+14)+(6+24))+8)))=0"),
    ("8x+(12x+(16x+(((12x+14)+(6+24))+8)))=0", "false", "8x+(12x+(16x+(12x+(14+(6+32)))))=0"),
    ("8x+(12x+(16x+(12x+(14+(6+32)))))=0", "false", "8x+(12x+(16x+(12x+(14+38))))=0"),
    ("8x+(12x+(16x+(12x+(14+38))))=0", "false", "8x+(12x+(16x+(12x+52)))=0"),
    ("8x+(12x+(16x+(12x+52)))=0", "false", "8x+(12x+(28x+52))=0"),
    ("8x+(12x+(28x+52))=0", "false", "8x+(40x+52)=0"),
    ("8x+(40x+52)=0", "false", "48x+52=0"),
    ("48x+52=0", "false", "48x=-52"),
    ("48x=-52", "true", "x=-13/12"), #actual last step
    #("48x=-52", "true", "x=-52/48"), optimal

    #END ADD PLUS MULTIPLY
    
    
    #FRACTIONS AND DIVISIONS

    ("(x+3)/4-((x-3)/2+3)=0", "false", "(x+3)/4-((x/2-3/2)+3)=0"),
    ("(x+3)/4-((x/2-3/2)+3)=0", "false", "(x+3)/4-(x/2+3/2)=0"),
    ("(x+3)/4-(x/2+3/2)=0", "false", "(x/4+3/4)-(x/2+3/2)=0"),
    ("(x/4+3/4)-(x/2+3/2)=0", "false", "x/4-((x/2-3/2)+3/4)=0"),
    ("x/4-((x/2-3/2)+3/4)=0", "false", "x/4-(x/2-3/4)=0"),
    ("x/4-(x/2-3/4)=0", "false", "x/4+(3/4-x/2)=0"),
    ("x/4+(3/4-x/2)=0", "false", "3/4-x/4=0"),
    ("3/4-x/4=0", "false", "-x/4=-3/4"),
    ("-x/4=-3/4", "true", "x=3"),

    ("(x+3)/4-((x-3)/(2+3))=0", "false", "-(x/5-3/5)+(x+3)/4=0"),

    ("(x+3)/4 -(3-x)/3=(x-3)/2+3", "false", "-(3-x)/3+(x+3)/4-((x-3)/2+3)=0"),
    ("(-(3-x)/3+(x+3)/4)-((x-3)/2+3)=0", "false", "(x-3)/3+((x+3)/4-((x/2-3/2)+3))=0"),
    ("(x/3-1)+((x+3)/4-((x-3)/2+3))=0", "false", "x/3+(((x+3)/4-((x/2-3/2)+3))-1)=0"),

    # END FRACTIONS AND DIVISIONS
    
    
    
    # SECOND GRADE EQUATIONS

    # ("((-5x^2 + 4x + 5x)(x+1) - 3(x+2))=0", "false", "(x+1)*(-5x**2+9x)-3*(x+2)=0"),
    # ("(x+1)*(-5x**2+9x)-3*(x+2)=0", "false", "(x*(9-5x))*(x+1)-3*(x+2)=0"),
    # ("(x*(9-5x))*(x+1)-3*(x+2)=0", "false", "x*(9-5x)*(x+1)-(3x+6)=0"),
    # ("x*(9-5x)*(x+1)-(3x+6)=0", "false", "-x*(x+1)*(5x-9)-(3x+6)=0"),
    # ("-x*(x+1)*(5x-9)-(3x+6)=0", "false", "-x*(x+1)*(5x-9)-(3x+6)=0"), ##TODO:fix loop

])
def test_next_step(equation, pene_step, expected):
    _, new_step, _, _, _ = next_step(equation, pene_step)
    assert new_step == expected